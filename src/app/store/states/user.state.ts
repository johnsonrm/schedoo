import { User } from 'src/app/models/user.model';
import { State } from '@ngxs/store';
import { Injectable } from '@angular/core';
import { Action, StateContext } from '@ngxs/store';
import { UserActions } from '../actions/user.action';
import { Goal } from 'src/app/models/goal.model';
import { Firestore, collection, getDoc, getDocs, doc, addDoc, query, updateDoc, deleteDoc } from '@angular/fire/firestore';
import { CollectionReference, DocumentReference,  } from 'firebase/firestore';
import { DailyRoutine } from 'src/app/models/daily.routine.model';
import { Time } from '@angular/common';
import { RoutineScheduleService } from 'src/app/services/routine-schedule.service';

export interface UserStateModel {

  userData: User;

}

@State<UserStateModel>({
  name: 'user',
  defaults: {
    userData: {
      goals: [],
      dailyRoutines: []} as User,

  }
})
@Injectable()
export class UserState {

  private usersCollection: CollectionReference = null;
  private userDocument: DocumentReference = null;

  constructor(private angularFirestore: Firestore, private dailyRoutineService: RoutineScheduleService) {
    this.usersCollection = collection(this.angularFirestore, 'users');
   }

  @Action(UserActions.Login)
  Login(ctx: StateContext<UserStateModel>, action: UserActions.Login) { // action.payload is the uid of the user that logged in

    console.log("UserActions.Login");

        // get the user data from the firestore
        getDoc(doc(this.usersCollection, action.payload)).then((doc) => {

          const userDocData = doc.data();

          if (userDocData) {
            this.userDocument = doc.ref;

            // handle the goals
            const goalsCollection = collection(this.userDocument, 'goals');
            const goalsQuery = query(goalsCollection);
            getDocs(goalsQuery).then((querySnapshot) => {
              const goalItems: Goal[] = [];
              querySnapshot.forEach(doc => {
                const goalItem = doc.data();
                goalItems.push({
                  id: doc.id,
                  goalName: goalItem.goalName,
                  goalDate: goalItem.goalDate,
                  goalType: goalItem.goalType,
                  priority: goalItem.priority,
                  status: goalItem.status,
                  description: goalItem.description});
              });
              userDocData.goals = goalItems;
            });

            // handle the routines
            const dailyRoutinesCollection = collection(this.userDocument, 'dailyRoutines');
            const dailyRoutineQuery = query(dailyRoutinesCollection);
            getDocs(dailyRoutineQuery).then((querySnapshot) => {
              const dailyRoutineItems: DailyRoutine[] = [];
              querySnapshot.forEach(doc => {
                const dailyRoutine = doc.data();
                dailyRoutineItems.push({
                  id: doc.id,
                  time: dailyRoutine.time,
                  duration: dailyRoutine.duration,
                  description: dailyRoutine.description
                });
              });

            this.sortDailyRoutineItems(dailyRoutineItems);

            userDocData.dailyRoutines = dailyRoutineItems;

              // set the user data in the state
              ctx.setState({userData: <User>userDocData});

            });

          }

        });

  }

  @Action(UserActions.Logout)
  Logout(ctx: StateContext<UserStateModel>, action: UserActions.Logout) {
      console.log();
      ctx.setState({userData: {goals: [], dailyRoutines: []} as User});

  }

  @Action(UserActions.AddGoal)
  async AddGoal(ctx: StateContext<UserStateModel>, action: UserActions.AddGoal) {

        if (this.userDocument) {

          //remove the id key from the object, as an id will be generated by firebase
          delete action.payload.id;

          const goalsCollection = collection(this.userDocument, 'goals');
          const newGoal = await addDoc(goalsCollection, action.payload);

          action.payload.id = newGoal.id;

          // add the goal to the state
          const newUserData: User = ctx.getState().userData;
          newUserData.goals.push(action.payload);

          if (newGoal) {
            ctx.setState({userData: newUserData});
            // ctx.patchState({userData.goals: [...ctx.getState().goals, action.payload]});
          }

        } else {
          throw new Error("Attempted to add a goal to a user that was not logged in.");
        }

  }

  @Action(UserActions.UpdateGoal)
  async UpdateGoal(ctx: StateContext<UserStateModel>, action: UserActions.UpdateGoal) {

        if (this.userDocument) {

          const goalsCollection = collection(this.userDocument, 'goals');
          const updateItem = {};
          const keys = Object.keys(action.payload);
          delete keys[keys.indexOf('id')];

          keys.forEach(key => {
            updateItem[key] = action.payload[key];
          });

          if (!action.payload.id) {
            throw new Error("Item must have an id to be updated.");
          }

          getDoc(doc(goalsCollection, action.payload.id)).then((doc) => {

            if (doc.exists()) {

              updateDoc(doc.ref, updateItem).then(() => {

                // document was updated successfully in firestore, now update the state
                // get the user data from the state first
                const newUserData: User = ctx.getState().userData;

                // find the goal within the user data state to update it there
                const goalIndex = newUserData.goals.findIndex((updateItem: Goal) => updateItem.id === action.payload.id);

                if (goalIndex > -1) {
                  newUserData.goals[goalIndex] = action.payload;
                  ctx.patchState({userData: newUserData});
            }

              });

            } else {
              throw new Error("Attempted to update a user goal that was not found in the data.");

            }
          });


        }

  }

  @Action(UserActions.RemoveGoal)
  async RemoveGoal(ctx: StateContext<UserStateModel>, action: UserActions.RemoveGoal) {

      try {

        if (this.userDocument) {

          const goalsCollection = collection(this.userDocument, 'goals');
          const docRef = doc(goalsCollection, action.payload.id);

          deleteDoc(docRef).then(() => {

            // user document was updated successfully in firestore, i.e. goal was removed; now update the state
            // get the user data from the state first
            const newUserData: User = ctx.getState().userData;

            // find the goal within the user data state to update it there
            const goalIndex = newUserData.goals.findIndex((updateItem: Goal) => updateItem.id === action.payload.id);

            if (goalIndex > -1) {
              delete newUserData.goals[goalIndex];
              ctx.patchState({userData: newUserData});
            }

          });

        } else {
          throw new Error("Attempted to remove a goal from a user that was not logged in or had no associated data.");
        }

       } catch (err) {
          console.error("Error deleting document: ", err);
          throw err;
        }

      }

  // Daily Routine Actions

  @Action(UserActions.AddDailyRoutine)
  async AddDailyRoutine(ctx: StateContext<UserStateModel>, action: UserActions.AddDailyRoutine) {

        if (this.userDocument) {

          //remove the id key from the object, as an id will be generated by firebase
          delete action.payload.id;

          const dailyRoutinesCollection = collection(this.userDocument, 'dailyRoutines');
          const newDailyRoutine = await addDoc(dailyRoutinesCollection, action.payload);

          action.payload.id = newDailyRoutine.id;

          // add the Daily Routine to the state
          const newUserData: User = ctx.getState().userData;
          newUserData.dailyRoutines.push(action.payload);

          this.sortDailyRoutineItems(newUserData.dailyRoutines);

          if (newDailyRoutine) {
            ctx.patchState({userData: newUserData});
          }

        } else {
          throw new Error("Attempted to add a goal to a user that was not logged in.");
        }

  }


  @Action(UserActions.UpdateDailyRoutine)
  async UpdateDailyRoutine(ctx: StateContext<UserStateModel>, action: UserActions.UpdateDailyRoutine) {

    try {
      this.updateItem(ctx, ctx.getState().userData.dailyRoutines, 'dailyRoutines', action.payload);
    } catch(err) {
      console.error("Error updating document: ", err);
      throw err("Error updating daily routine entry", err);
    }

  }


  @Action(UserActions.RemoveDailyRoutine)
  async RemoveDailyRoutine(ctx: StateContext<UserStateModel>, action: UserActions.RemoveDailyRoutine) {

    try {
      this.removeItem(ctx, ctx.getState().userData.dailyRoutines, 'dailyRoutines', action.payload);
    } catch(err) {
      console.error("Error deleting daily routine entry", err);
      throw err;
    }

  }


  private updateItem(ctx: StateContext<UserStateModel>, currentItems: any[], collectionName: string, item: any) {

    if (this.userDocument) {

      const itemsCollection = collection(this.userDocument, collectionName);
      const updateItem = {};
      const keys = Object.keys(item);
      delete keys[keys.indexOf('id')];

      keys.forEach(key => {
        updateItem[key] = item[key];
      });

      if (!item.id) {
        throw new Error("Item must have an id to be updated.");
      }

      getDoc(doc(itemsCollection, item.id)).then((doc) => {

        if (doc.exists()) {

          updateDoc(doc.ref, updateItem).then(() => {

            // document was updated successfully in firestore, now update the state
            // get the user data from the state first
            const newUserData: User = ctx.getState().userData;

            // find the goal within the user data state to update it there
            const itemIndex = currentItems.findIndex((updateItem) => updateItem.id === item.id);

            if (itemIndex > -1) {
              newUserData.dailyRoutines[itemIndex] = item;
              ctx.patchState({userData: newUserData});
        }

          });

        } else {
          throw new Error("Attempted to update an item that was not found in the data.");

        }
      });


    }
  }

  private removeItem(ctx: StateContext<UserStateModel>, currentItems: any[], collectionName: string, item: any) {

    try {

      if (this.userDocument) {

        const itemsCollection = collection(this.userDocument, collectionName);
        const docRef = doc(itemsCollection, item.id);

        deleteDoc(docRef).then(() => {

          // user document was updated successfully in firestore, i.e. item was removed; now update the state
          // get the user data from the state first
          const newUserData: User = ctx.getState().userData;

          // find the item within the user data state to update it there
          const itemIndex = currentItems.findIndex((updateItem) => updateItem.id === item.id);

          if (itemIndex > -1) {
            // delete the item and update the state
            delete currentItems[itemIndex];
            ctx.patchState({userData: newUserData});
          }

        });

      } else {
        throw new Error("Attempted to remove an item from a user that was not logged in or had no associated data.");
      }

     } catch (err) {
        console.error("Error deleting document: ", err);
        throw err;
      }
  }


  private sortDailyRoutineItems(dailyRoutineItems: DailyRoutine[]) {

    if(dailyRoutineItems) {
      dailyRoutineItems.sort( (a, b) => {
        return a.time.hours - b.time.hours || a.time.minutes - b.time.minutes;
      });
    }

  }


}



